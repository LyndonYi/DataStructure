哈希表示一种数据结构,可以提供快读的插入操作和查找操作,但是其缺点是,它是基于数据的,被创建难于扩展.
哈希表最重要的运算时哈希化,就是将怎么转换成为数组的下标--通过哈希函数来完成.
 			关于哈希表冲突的解决--开放地址法
 线性探测时会发生聚集,一旦聚集形成,它会变得越来越大,那些哈希化落在范围内的数据项都要一步一步的移动 ,并且,只能插在聚集的最后,由此会
  使聚集变得更大,聚集越大,它会增长的越快,装填因子最多是2/3,因为当装填因子不太大时,聚集分布得比较连贯.
   而决定探测时防止聚集产生的一种尝试,其思想是探测相隔较远的单元,使插入的数%摸以数组的长度之后的下标落点,可以按与原同的下标的数组的移动距离,
   落得比较远.
   当二次探测搜索变长时,在%数范围内,会飞跃整个数组,但是要防止填满,给定一个装填因子,作为警告判断.当探测序列每增加一步,跨过的单元就越来越多,
   如果序列太长,步长最终会超过整型变量的范围,这回导致在%数之前会赋值失败,二次探测有一个现象叫做聚集:就是只有一项,其关键字映射到7,就需要更长的步长探测,
    但这不是一个严重的问题,二次探测不会经常使用,因为稍微好一点的方法,叫再哈希:
     再 哈希:
      依赖于关键字的探测序列,即不同关键字,即使映射到相同的下标,也可以使用不同的探测序列方法,就是把关键字用不同的哈希函数在做一遍哈希化,用这个结果作为步长,
       对指定的关键字,步长在整个探测中是不变的,不过不同的关键字使用不同的步长


连地址法:
   在哈希表的每个单元中设置链表,映射到相同的单元中,就接到量表单的这位置,装填因子一般>=1,不希望连表太满.